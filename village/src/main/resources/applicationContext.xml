<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- ========数据库连接信息 ==========-->
	
	<!-- 加载配置文件 -->
<bean class="com.bed_lock.utils.EncryptPropertyPlaceholderConfigurer" p:locations="classpath:*.properties"/>

	
	<!-- 数据库连接池 -->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

	<property name="driverClassName" value="${jdbc.driver}" />
	
    <property name="url" value="${jdbc.url}" />

    <property name="username" value="${jdbc.username}" />

    <property name="password" value="${jdbc.password}" />

</bean>


	
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
			<property name="url" value="${jdbc.url}"></property>
			<property name="username" value="${jdbc.username}"></property>
			<property name="password" value="${jdbc.password}"></property>
	</bean> -->
	
	<!-- =========配置和mybaits的整合======== -->
	<!-- 在SpringIoc容器中 创建MyBatis的核心类 SqlSesionFactory ,注入数据源-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- <property name="configLocation" value="classpath:mybaits-config.xml"></property> -->
		<!-- 加载mapper.xml路径 -->
	 	 <property name="mapperLocations" value="classpath:com/bed_lock/mapper/*.xml"></property>
	 </bean>
	 
	  <!-- 第三种方式生成mapper对象(批量产生多个mapper)
	 	批量产生Mapper对在SpringIOC中的 id值 默认就是  首字母小写接口名 (首字母小写的接口名=id值)
	 	  -->
	  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFacotry"></property>  -->
	 	 	 <!-- 扫描所有dao接口的实现，加入到ioc容器 --> 	 	 	 
	 	 	<property name="basePackage" value="com.bed_lock.mapper"></property>
	 </bean> 
	 
	 <!-- 配置一个可以执行批量的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	 
	 <!-- =====事务控制的配置===== -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<!-- 控制数据源 -->
	 	<property name="dataSource" ref="dataSource"></property>
	 </bean>
	 
	 <!-- 开启基于注解的事务，使用xml配置形式的事务（必须主要都是使用配置式） -->
	 <aop:config>
	 	<!-- 切入点表达式 -->
	 	<aop:pointcut expression="execution(* com.bed_lock.service..*(..))" id="txPoint"/>
	 	<!-- 配置事务增强 -->
	 	<aop:advisor advice-ref="txAdvice"  pointcut-ref="txPoint"/>
	 </aop:config>
	 
	<!--  配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- *代表所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!-- 以get开始的所有方法 -->
			<!-- <tx:method name="get*" read-only="true"/> -->
		</tx:attributes>
	</tx:advice>
	 
	 <!-- 第二种方式生成mapper对象 -->
	 <!-- <bean id="adminxDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
	 	<property name="mapperInterface" value="com.bed_lock.mapper.adminxDao"></property>
	 	<property name="sqlSessionFactory" ref="sqlSessionFacotry"></property>
	 </bean> -->
	 
	 <!-- 第二种方式生成mapper对象 -->
	 <!-- <bean id="productDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
	 	<property name="mapperInterface" value="com.bed_lock.mapper.productDao"></property>
	 	<property name="sqlSessionFactory" ref="sqlSessionFacotry"></property>
	 </bean> -->
	 
	 <!-- 第二种方式生成mapper对象 -->
	 <!-- <bean id="careDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
	 	<property name="mapperInterface" value="com.bed_lock.mapper.careDao"></property>
	 	<property name="sqlSessionFactory" ref="sqlSessionFacotry"></property>
	 </bean> -->
	 
	 <!-- 依赖注入：给service注入dao -->
	  <!-- <bean id="adminxservice" class="com.bed_lock.service.adminxServiceImpl">
	 	<property name="adminxdao" ref="adminxDao"></property>
	 </bean>  --> 
	 
	  <!-- 依赖注入：给service注入dao -->
	 <!--  <bean id="productservice" class="com.bed_lock.service.productServiceImpl">
	 	<property name="productdao" ref="productDao"></property>
	 </bean>  -->
	 
	 <!-- 依赖注入：给service注入dao -->
	  <!-- <bean id="careservice" class="com.bed_lock.service.careServiceImpl">
	 	<property name="caredao" ref="careDao"></property>
	 </bean>  --> 
	 
	 <!-- 注解扫描、将服务器器所在包 加入IOC容器 -->
	<context:component-scan base-package="com.bed_lock.service"></context:component-scan>
	
</beans>
